// Generated by CoffeeScript 1.2.1-pre
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define([''], function() {
    var ItemView;
    return ItemView = (function(_super) {
      var tagName;

      __extends(ItemView, _super);

      ItemView.name = 'ItemView';

      function ItemView() {
        this.toggle = __bind(this.toggle, this);

        this.remove = __bind(this.remove, this);

        this.render = __bind(this.render, this);
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      tagName = "li";

      ItemView.prototype.initialize = function() {
        this.model = Backbone.Model;
        return this.model.bind('change', this.render);
      };

      ItemView.prototype.render = function() {
        $(this.el).html("<div class=\"item\">\n  <input class=\"done\" type=\"checkbox\" " + (this.model.get('done') ? "checked=checked" : "") + " />\n  <span class=\"content\">" + (this.model.get('content')) + "</span>\n  <span class=\"delete\"></span>\n</div>");
        console.log("Implement template here too");
        return this;
      };

      ItemView.prototype.remove = function() {
        $(this.el).remove();
        this.model.destroy();
        return this;
      };

      ItemView.prototype.toggle = function() {
        this.model.toggleDone();
        return this;
      };

      ItemView.prototype.events = {
        'click .done': 'toggle',
        'click .delete': 'remove'
      };

      return ItemView;

    })(Backbone.View);
  });

}).call(this);
